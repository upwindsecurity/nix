{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.upwindSensor;
  upwindPkg = pkgs.callPackage ./upwind-pkg.nix {
    sensorVersion = cfg.sensorVersion;
    hostconfigVersion = if cfg.enableHostconfig then cfg.hostconfigVersion else "";
    region = cfg.region;
    domain = cfg.domain;
  };
in
{
  options.services.upwindSensor = {
    enable = mkEnableOption "Upwind Security Components";

    enableScanner = mkOption {
      type = types.bool;
      default = true;
      description = "Enable the Upwind Sensor Scanner.";
    };

    enableHostconfig = mkOption {
      type = types.bool;
      default = true;
      description = "Enable the Upwind Sensor Hostconfig.";
    };

    sensorVersion = mkOption {
      type = types.str;
      default = "stable";
      description = "The Upwind Sensor version.";
    };

    hostconfigVersion = mkOption {
      type = types.str;
      default = "stable";
      description = "The Upwind Sensor Hostconfig version.";
    };

    region = mkOption {
      type = types.enum [ "us" "eu" ];
      default = "us";
      description = "Upwind region.";
    };

    domain = mkOption {
      type = types.str;
      default = "upwind.io";
      description = "Override the upwind.io domain for development.";
    };

    logLevel = mkOption {
      type = types.str;
      default = "info";
      description = "Log level for the sensor.";
    };

    # CPU and memory resource limits
    sensorCpuQuota = mkOption {
      type = types.nullOr types.str; # e.g., "50%"
      default = null; # Use systemd default or sensor default if null
      description = "Systemd CPUQuota setting for the sensor service.";
    };

    sensorMemoryMax = mkOption {
      type = types.nullOr types.str;
      default = null;
      description = "Maximum memory limit for the sensor service (e.g., '1G').";
    };

    sensorMemoryHigh = mkOption {
      type = types.nullOr types.str;
      default = null;
      description = "Memory threshold for the sensor service when throttling begins.";
    };

    # Scanner resource settings
    scannerCpuWeight = mkOption {
      type = types.nullOr types.int;
      default = null;
      description = "CPU weight for the scanner service.";
    };

    scannerIoWeight = mkOption {
      type = types.nullOr types.int;
      default = null;
      description = "I/O weight for the scanner service.";
    };

    scannerMemoryMax = mkOption {
      type = types.nullOr types.str;
      default = null;
      description = "Maximum memory limit for the scanner service (e.g., '500M').";
    };

    # TODO: ... add options corresponding to UPWIND_ variables
    # TODO: Configure scanner exclusions
  };

  config = mkIf cfg.enable {
    environment.etc."upwind/sensor.yaml".text = ''
      # Upwind Sensor Configuration generated by NixOS
      region: "${cfg.region}"
      api-host: "https://sensor${if cfg.region == "eu" then ".eu" else ""}.upwind.io" # Derived from script logic
      auth-endpoint: "https://oauth${if cfg.region == "eu" then ".eu" else ""}.upwind.io/oauth/token" # Derived
      log-level: "${cfg.logLevel}"
      # ... other config keys based on options and script logic
      install-type: "std"
      platform: "host"
      # ... add features like sock-perf, proc-username
    '';

    environment.etc."upwind/sensor-hostconfig.yaml".text = ''
      # Upwind Hostconfig Configuration generated by NixOS
      region: "${cfg.region}"
      api-host: "https://sensor${if cfg.region == "eu" then ".eu" else ""}.upwind.io"
      auth-endpoint: "https://oauth${if cfg.region == "eu" then ".eu" else ""}.upwind.io/oauth/token"
      log-level: "${cfg.logLevel}" # Assuming same log level option
      # ... other hostconfig specific settings
    '';

    # Systemd Service Definition
    systemd.services.upwind-sensor = {
      description = "Upwind Sensor";
      after = [ "network-online.target" ];
      wants = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];

      serviceConfig = {
        ExecStart = "${upwindPkg}/bin/upwind-sensor agent";
        Restart = "always";
        # Resource Controls - map options to systemd properties
        CPUQuota = cfg.sensorCpuQuota;
        MemoryMax = cfg.sensorMemoryMax; # Define memoryMax option
        MemoryHigh = cfg.sensorMemoryHigh; # Define memoryHigh option
        # ... other service settings
      };
    };

    # Hostconfig Service
    systemd.services.upwind-sensor-hostconfig = {
      description = "Upwind Sensor Hostconfig";
      after = [ "network-online.target" ];
      wants = [ "network-online.target" ];
      wantedBy = [ "multi-user.target" ];
      serviceConfig = {
        ExecStart = "${upwindPkg}/bin/upwind-sensor-hostconfig";
        Restart = "always";
      };
    };

    # Scanner Service
    systemd.services.upwind-sensor-scanner = {
      description = "Upwind Sensor Scanner";
      serviceConfig = {
        Type = "exec";
        ExecStart = "${upwindPkg}/bin/upwind-sensor scan --path=/"; # Assuming scan command
        # Resource controls for scanner
        CPUWeight = cfg.scannerCpuWeight; # Define option
        IOWeight = cfg.scannerIoWeight;   # Define option
        MemoryMax = cfg.scannerMemoryMax; # Define option
        # ...
      };
    };

    # Scanner Timer
    systemd.timers.upwind-sensor-scanner = {
       description = "Upwind Sensor Scanner Timer";
       wantedBy = [ "timers.target" ];
       timerConfig = {
         OnCalendar = "*:00:00"; # From script
         AccuracySec = "5m";   # From script
         Unit = "upwind-sensor-scanner.service";
       };
    };
  };
}
